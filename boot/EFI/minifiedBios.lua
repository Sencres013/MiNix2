local a=component.proxy(component.list("gpu")())if not a then computer.shutdown()end;local b;for c in component.list("screen")do if#component.invoke(c,"getKeyboards")>0 then b=c;break end end;if not b then b=component.list("screen")()end;if not b or not a.bind(b)then computer.shutdown()end;local d,e=a.getResolution()a.setDepth(a.maxDepth())a.setBackground(0x000000)a.setForeground(0xA5A5A5)a.fill(1,1,d,e," ")a.set(1,e,"Ctrl - ")a.setForeground(0xFFFFFF)local f=computer.uptime()+2;while computer.uptime()<f do local g=table.pack(computer.pullSignal(f-computer.uptime()))if g[1]=="key_down"and g[4]==0x1d then a.fill(1,1,d,e," ")break end end;a.fill(1,1,d,e," ")local h=1;local function i(j,k)checkArg(1,j,"string")checkArg(2,k,"number","nil")k=type(k)=="number"and k or 0;local l,m,n;if k==1 or k==2 then if k==1 then l=0x00B600;m="OK"n=4 else l=0xFF0040;m="FAIL"n=3 end;a.set(1,h,"[")a.setForeground(l)a.set(n,h,m)a.setForeground(0xFFFFFF)a.set(8,h,"]")end;for o=0,#j//d-9,1 do a.set(10,h,string.sub(j,o*(d-9),math.min((o+1)*(d-9),#j)))if h+1>e then a.copy(1,2,d,e-1,0,-1)a.fill(1,e,d,1," ")else h=h+1 end end end;i("GPU bound to screen",1)i("Finding bootable MiNix medium")local p=component.proxy(component.list("eeprom")())local q=component.proxy(p.getData())if q then i("Found bootable MiNix medium",1)else for c in component.list("filesystem")do local r=component.proxy(c)if r.getLabel()~="tmpfs"and not r.isReadOnly()and r.exists("/sbin/init.lua")then q=r;break end end;if not q then i("Bootable MiNix filesystem not found",2)i("Waiting for insertion of a bootable MiNix filesystem")while true do local g=table.pack(computer.pullSignal())if g[1]=="component_added"and g[3]=="filesystem"then if component.invoke(g[2],"exists","/sbin/init.lua")then q=g[2]break end end end end end;p.setData(q.address)function dofile(s)checkArg(1,s,"string")local t=string.sub(s,#s-(string.find(string.reverse(s),"/")or#s+1)+2 or 0,#s)if not q.exists(s)then error("Can't find file "..t,0)elseif q.isDirectory(s)then error(s.." is a directory",0)end;local u=q.open(s)local v,w="",""repeat w=w..v;v=q.read(u,math.huge)until not v;local x,y=load(w,"="..string.sub(t,1,string.find(t,".",1,true)-1))if x=="fail"then error("Error executing "..t..": "..tostring(y),0)end;return x end;i("Loading init file")local z=dofile("/sbin/init.lua")i("Loaded init file",1)i("Initializing module system")package={preload={},loaded={},search=function(A,s)checkArg(1,A,"string")checkArg(2,s,"string","nil")s=s or"/"if q.exists(s..A)then return s..A end;for B in q.list(s)do if q.isDirectory(B)then local C=package.search(A,B)if C then return C end end end;return false end}function require(A)checkArg(1,A,"string")if package.loaded[A]then return package.loaded[A]elseif package.preload[A]then error("Recursive require detected in module "..A,0)end;preload[A]=true;local D=package.search(A)if not D then error("Module "..A.." not found",0)end;local x=dofile(D)package.preload[A]=nil;package.loaded[A]=x()or true;return package.loaded[A]end;i("Initialized module system")z()computer.shutdown()
